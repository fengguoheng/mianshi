{"version":3,"file":"js/327.946f69f7.js","mappings":"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","sources":["webpack://avatarvue2/./src/views/三道题.vue","webpack://avatarvue2/src/views/三道题.vue","webpack://avatarvue2/./src/views/三道题.vue?ee41","webpack://avatarvue2/./src/views/三道题.vue?9d05"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"container\"},[_c('h1',[_vm._v(\"笔试\")]),(_vm.isLoading)?_c('div',{staticClass:\"loading\"},[_c('p',[_vm._v(\"正在加载题目，请稍候...\")])]):_c('div',{ref:\"questionsContainer\",staticClass:\"question-container\"},_vm._l((_vm.questions),function(questionItem,index){return _c('div',{key:index,staticClass:\"question\"},[_c('h3',[_vm._v(\"问题 \"+_vm._s(index + 1))]),_c('div',{staticClass:\"question-content\"},[_vm._v(\" \"+_vm._s(questionItem.question)+\" \")]),_c('div',{staticClass:\"options\"},_vm._l((questionItem.options),function(option,optIndex){return _c('label',{key:optIndex,staticClass:\"option\"},[_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.answers[index]),expression:\"answers[index]\"}],attrs:{\"type\":\"radio\",\"name\":'q' + (index + 1)},domProps:{\"value\":option.value,\"checked\":_vm._q(_vm.answers[index],option.value)},on:{\"change\":function($event){return _vm.$set(_vm.answers, index, option.value)}}}),_vm._v(\" \"+_vm._s(option.label)+\". \"+_vm._s(option.content)+\" \")])}),0),(_vm.showAnswers)?_c('div',{staticClass:\"answer\"},[_c('p',[_c('strong',[_vm._v(\"正确答案：\")]),_vm._v(_vm._s(questionItem.answer))])]):_vm._e()])}),0),_c('div',{staticClass:\"button-area\"},[_c('button',{staticClass:\"custom-btn\",attrs:{\"disabled\":_vm.isSubmitting || !_vm.hasAnsweredAll},on:{\"click\":_vm.handleSubmit}},[_vm._v(\" \"+_vm._s(_vm.isSubmitting ? '提交中...' : '提交答案')+\" \")]),(!_vm.isSubmitting && _vm.hasAnsweredAll)?_c('button',{staticClass:\"show-answer-btn\",on:{\"click\":function($event){_vm.showAnswers = true}}},[_vm._v(\" 查看答案 \")]):_vm._e()]),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.isLoading),expression:\"isLoading\"}],staticClass:\"loading\"},[_c('p',[_vm._v(_vm._s(_vm.loadingText))])]),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.result),expression:\"result\"}],staticClass:\"result\"},[_c('p',[_vm._v(_vm._s(_vm.result))])])])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div class=\"container\">\r\n    <h1>笔试</h1>\r\n\r\n    <!-- 题目区域 -->\r\n    <div v-if=\"isLoading\" class=\"loading\">\r\n      <p>正在加载题目，请稍候...</p>\r\n    </div>\r\n\r\n    <div v-else class=\"question-container\" ref=\"questionsContainer\">\r\n      <div v-for=\"(questionItem, index) in questions\" :key=\"index\" class=\"question\">\r\n        <h3>问题 {{ index + 1 }}</h3>\r\n        <div class=\"question-content\">\r\n          {{ questionItem.question }}\r\n        </div>\r\n        <div class=\"options\">\r\n          <label class=\"option\" v-for=\"(option, optIndex) in questionItem.options\" :key=\"optIndex\">\r\n            <input \r\n              type=\"radio\" \r\n              :name=\"'q' + (index + 1)\" \r\n              :value=\"option.value\" \r\n              v-model=\"answers[index]\"\r\n            >\r\n            {{ option.label }}. {{ option.content }}\r\n          </label>\r\n        </div>\r\n        <!-- 显示答案（可选） -->\r\n        <div v-if=\"showAnswers\" class=\"answer\">\r\n          <p><strong>正确答案：</strong>{{ questionItem.answer }}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 按钮区域 -->\r\n    <div class=\"button-area\">\r\n      <button @click=\"handleSubmit\" :disabled=\"isSubmitting || !hasAnsweredAll\" class=\"custom-btn\">\r\n        {{ isSubmitting ? '提交中...' : '提交答案' }}\r\n      </button>\r\n      <button @click=\"showAnswers = true\" v-if=\"!isSubmitting && hasAnsweredAll\" class=\"show-answer-btn\">\r\n        查看答案\r\n      </button>\r\n    </div>\r\n\r\n    <!-- 加载状态 -->\r\n    <div v-show=\"isLoading\" class=\"loading\">\r\n      <p>{{ loadingText }}</p>\r\n    </div>\r\n\r\n    <!-- 结果展示 -->\r\n    <div v-show=\"result\" class=\"result\">\r\n      <p>{{ result }}</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport html2canvas from 'html2canvas';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      rawQuestions: '',\r\n      questions: [],        // 解析后的题目数组\r\n      answers: [],          // 用户选择的答案\r\n      isLoading: false,\r\n      loadingText: '',\r\n      isSubmitting: false,\r\n      result: '',\r\n      showAnswers: false    // 控制是否显示答案\r\n    };\r\n  },\r\n  computed: {\r\n    hasAnsweredAll() {\r\n      return this.answers.every(answer => answer);\r\n    }\r\n  },\r\n  mounted() {\r\n    this.loadQuestions();\r\n  },\r\n  methods: {\r\n    async loadQuestions() {\r\n      this.isLoading = true;\r\n      this.loadingText = '加载题目中...';\r\n\r\n      try {\r\n        const questionData = localStorage.getItem('question');\r\n        if (!questionData) throw new Error('未找到题目数据');\r\n\r\n        this.rawQuestions = questionData;\r\n        this.parseQuestions(questionData);  // 解析题目数据\r\n        this.answers = new Array(this.questions.length).fill(''); // 初始化答案数组\r\n      } catch (error) {\r\n        this.result = `错误：${error.message}，请先上传简历生成题目。`;\r\n      } finally {\r\n        this.isLoading = false;\r\n      }\r\n    },\r\n\r\n    // 优化后的题目解析方法，排除答案部分\r\n    parseQuestions(questionData) {\r\n      const questions = [];\r\n      const lines = questionData.split('\\n');\r\n      let currentQuestion = null;\r\n      let currentOptions = [];\r\n      let isParsingAnswers = false;  // 标记是否正在解析答案部分\r\n\r\n      // 解析题目和选项\r\n      lines.forEach((line, index) => {\r\n        const lineTrimmed = line.trim();\r\n        \r\n        // 检测答案部分开始\r\n        if (lineTrimmed.startsWith('答案：') || lineTrimmed.startsWith('答案:')) {\r\n          isParsingAnswers = true;\r\n          return;\r\n        }\r\n        \r\n        if (isParsingAnswers) return; // 跳过答案部分\r\n        \r\n        // 匹配题目开头 Q1: Q2: 等\r\n        const qMatch = lineTrimmed.match(/^Q(\\d+):$/);\r\n        if (qMatch) {\r\n          const qNum = parseInt(qMatch[1], 10);\r\n          \r\n          // 保存上一个题目\r\n          if (currentQuestion) {\r\n            currentQuestion.options = currentOptions;\r\n            questions.push(currentQuestion);\r\n            currentOptions = [];\r\n          }\r\n          \r\n          // 初始化新题目\r\n          currentQuestion = {\r\n            question: '',\r\n            options: [],\r\n            answer: ''\r\n          };\r\n        } \r\n        // 匹配选项 A. B. 等\r\n        else if (lineTrimmed.startsWith('A.') || lineTrimmed.startsWith('B.') || \r\n                 lineTrimmed.startsWith('C.') || lineTrimmed.startsWith('D.')) {\r\n          const label = lineTrimmed.charAt(0);\r\n          const content = lineTrimmed.slice(2).trim();\r\n          currentOptions.push({ label, content, value: label });\r\n        }\r\n        // 题目内容\r\n        else if (currentQuestion && lineTrimmed) {\r\n          currentQuestion.question += lineTrimmed + '\\n';\r\n        }\r\n      });\r\n      \r\n      // 添加最后一个题目\r\n      if (currentQuestion) {\r\n        currentQuestion.options = currentOptions;\r\n        questions.push(currentQuestion);\r\n      }\r\n      \r\n      // 解析答案部分\r\n      this.parseAnswers(questionData);\r\n      \r\n      this.questions = questions;\r\n    },\r\n    \r\n    // 单独解析答案部分\r\n    parseAnswers(questionData) {\r\n      const answerMatch = questionData.match(/答案：(.*)/);\r\n      if (answerMatch && answerMatch[1]) {\r\n        const answers = answerMatch[1].split('，');\r\n        const answerObj = {};\r\n        \r\n        answers.forEach(ans => {\r\n          const [q, a] = ans.split(': ');\r\n          if (q && a) {\r\n            const qNum = parseInt(q.replace('Q', ''), 10);\r\n            if (qNum > 0 && qNum <= this.questions.length) {\r\n              this.questions[qNum - 1].answer = a;\r\n            }\r\n          }\r\n        });\r\n      }\r\n    },\r\n\r\n    async handleSubmit() {\r\n      if (!this.hasAnsweredAll) {\r\n        alert('请回答所有问题');\r\n        return;\r\n      }\r\n\r\n      this.isSubmitting = true;\r\n      this.loadingText = '正在提交答案...';\r\n      this.result = '';\r\n\r\n      try {\r\n        // 生成截图\r\n        const canvas = await html2canvas(this.$refs.questionsContainer, {\r\n          useCORS: true,\r\n          logging: false\r\n        });\r\n        const imageBase64 = canvas.toDataURL('image/png').split(',')[1];\r\n\r\n        // 构建问题描述\r\n        const selectedAnswers = this.answers.map((ans, index) => `Q${index+1}: ${ans}`).join('\\n');\r\n        const question = `分析面试者答案：\\n${selectedAnswers}`;\r\n\r\n        // 发送请求\r\n        const response = await fetch('https://117.72.49.76:443/image-understanding', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ image_base64: imageBase64, question: question })\r\n        });\r\n\r\n        const data = await response.json();\r\n        if (data.status === 'processing') {\r\n          await this.pollResult(data.request_id);\r\n        } else {\r\n          this.result = `处理失败：${data.error || '未知错误'}`;\r\n        }\r\n      } catch (error) {\r\n        this.result = `请求失败：${error.message}`;\r\n      } finally {\r\n        this.isSubmitting = false;\r\n      }\r\n    },\r\n\r\n    async pollResult(requestId) {\r\n      try {\r\n        while (true) {\r\n          const resultResponse = await fetch(`https://117.72.49.76:443/get-result/${requestId}`);\r\n          const resultData = await resultResponse.json();\r\n\r\n          if (resultData.status === 'completed') {\r\n            localStorage.setItem('answer', resultData.content);\r\n            this.$router.push({ name: 'bishileidatu' });\r\n            return;\r\n          } else if (resultData.status === 'processing') {\r\n            await new Promise(resolve => setTimeout(resolve, 3000));\r\n            this.loadingText = '分析中，请稍候...';\r\n          } else {\r\n            this.result = `处理失败：${resultData.error || '未知错误'}`;\r\n            return;\r\n          }\r\n        }\r\n      } catch (error) {\r\n        this.result = `轮询失败：${error.message}`;\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n/* 保留原样式并新增部分样式 */\r\n.container { \r\n    padding: 30px;\r\n    max-width: 800px;\r\n    margin: 0 auto;\r\n    background: #f8f9fa;\r\n    border-radius: 12px;\r\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n}\r\n.loading {\r\n    margin: 20px 0;\r\n    padding: 15px;\r\n    background: #f8f9fa;\r\n    border-radius: 8px;\r\n    text-align: center;\r\n}\r\n.question {\r\n    margin-bottom: 30px;\r\n    padding: 20px;\r\n    background: white;\r\n    border: 1px solid #e0e0e0;\r\n    border-radius: 8px;\r\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\r\n}\r\n.question-content {\r\n    margin-bottom: 15px;\r\n    line-height: 1.6;\r\n}\r\n.options {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 10px;\r\n    margin: 15px 0;\r\n}\r\n.option {\r\n    display: flex;\r\n    align-items: flex-start;\r\n}\r\n.option input {\r\n    margin-right: 10px;\r\n    margin-top: 5px;\r\n}\r\n.answer {\r\n    margin-top: 15px;\r\n    padding-top: 10px;\r\n    border-top: 1px dashed #e0e0e0;\r\n    color: #10b981;\r\n    font-weight: bold;\r\n}\r\n.custom-btn {\r\n    padding: 10px 25px;\r\n    background: linear-gradient(135deg, #3498db, #2980b9);\r\n    color: white;\r\n    border: none;\r\n    border-radius: 6px;\r\n    cursor: pointer;\r\n    transition: transform 0.2s, box-shadow 0.2s;\r\n    margin: 20px 0 10px;\r\n    display: inline-block;\r\n}\r\n.show-answer-btn {\r\n    padding: 10px 20px;\r\n    background: #f39c12;\r\n    color: white;\r\n    border: none;\r\n    border-radius: 6px;\r\n    cursor: pointer;\r\n    transition: background 0.2s;\r\n    margin: 20px 0 10px 10px;\r\n    display: inline-block;\r\n}\r\n.show-answer-btn:hover {\r\n    background: #e67e22;\r\n}\r\n.button-area {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: flex-end;\r\n    gap: 10px;\r\n}\r\n.result {\r\n    margin-top: 30px;\r\n    padding: 20px;\r\n    background: white;\r\n    border: 1px solid #e0e0e0;\r\n    border-radius: 8px;\r\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\r\n}\r\n</style>","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./三道题.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./三道题.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./三道题.vue?vue&type=template&id=20dc22f4\"\nimport script from \"./三道题.vue?vue&type=script&lang=js\"\nexport * from \"./三道题.vue?vue&type=script&lang=js\"\nimport style0 from \"./三道题.vue?vue&type=style&index=0&id=20dc22f4&prod&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","staticClass","_v","isLoading","ref","_l","questions","questionItem","index","key","_s","question","options","option","optIndex","directives","name","rawName","value","answers","expression","attrs","domProps","_q","on","$event","$set","label","content","showAnswers","answer","_e","isSubmitting","hasAnsweredAll","handleSubmit","loadingText","result","staticRenderFns","data","rawQuestions","computed","every","mounted","loadQuestions","methods","questionData","localStorage","getItem","Error","parseQuestions","Array","length","fill","error","message","lines","split","currentQuestion","currentOptions","isParsingAnswers","forEach","line","lineTrimmed","trim","startsWith","qMatch","match","parseInt","push","charAt","slice","parseAnswers","answerMatch","ans","q","a","qNum","replace","canvas","html2canvas","$refs","questionsContainer","useCORS","logging","imageBase64","toDataURL","selectedAnswers","map","join","response","fetch","method","headers","body","JSON","stringify","image_base64","json","status","pollResult","request_id","alert","requestId","resultResponse","resultData","setItem","$router","Promise","resolve","setTimeout","component"],"sourceRoot":""}