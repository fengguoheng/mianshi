{"version":3,"file":"js/474.a88f9a87.js","mappings":"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","sources":["webpack://avatarvue2/./src/views/三道题提交图像.vue","webpack://avatarvue2/src/views/三道题提交图像.vue","webpack://avatarvue2/./src/views/三道题提交图像.vue?e425","webpack://avatarvue2/./src/views/三道题提交图像.vue?2d74"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"nav-container\"},[_c('div',{staticClass:\"container\"},[_c('div',{staticClass:\"button-group\"},[_c('button',{staticClass:\"custom-btn\",on:{\"click\":_vm.jumpToHome}},[_vm._v(\"返回首页\")])]),_c('div',{staticClass:\"exam-container\"},[_c('h1',[_vm._v(\"笔试答案分析\")]),_c('div',{ref:\"examContent\",staticClass:\"exam-content\"},[(_vm.isLoading)?_c('div',{staticClass:\"loading\"},[_c('p',[_vm._v(\"正在加载笔试内容...\")])]):_c('div',{staticClass:\"question-container\"},_vm._l((_vm.questions),function(questionItem,index){return _c('div',{key:index,staticClass:\"question\"},[_c('h3',[_vm._v(\"问题 \"+_vm._s(index + 1))]),_c('div',{staticClass:\"question-content\"},[_vm._v(\" \"+_vm._s(questionItem.question)+\" \")]),_c('div',{staticClass:\"options\"},_vm._l((questionItem.options),function(option,optIndex){return _c('label',{key:optIndex,staticClass:\"option\"},[_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.answers[index]),expression:\"answers[index]\"}],attrs:{\"type\":\"radio\",\"name\":'q' + (index + 1)},domProps:{\"value\":option.value,\"checked\":_vm._q(_vm.answers[index],option.value)},on:{\"change\":function($event){return _vm.$set(_vm.answers, index, option.value)}}}),_vm._v(\" \"+_vm._s(option.label)+\". \"+_vm._s(option.content)+\" \")])}),0),_c('div',{staticClass:\"user-answer\"},[_c('p',[_c('strong',[_vm._v(\"你的答案：\")]),_vm._v(_vm._s(_vm.answers[index] || '未选择'))]),(_vm.showAnswers)?_c('p',[_c('strong',[_vm._v(\"正确答案：\")]),_vm._v(_vm._s(questionItem.answer))]):_vm._e()])])}),0)]),_c('div',{staticClass:\"submit-area\"},[_c('button',{attrs:{\"id\":\"submitBtn\",\"disabled\":_vm.isUploading},on:{\"click\":_vm.handleUpload}},[_vm._v(\" \"+_vm._s(_vm.isUploading ? '分析中...' : '分析答案')+\" \")]),_c('button',{staticClass:\"show-answer-btn\",on:{\"click\":function($event){_vm.showAnswers = !_vm.showAnswers}}},[_vm._v(\" \"+_vm._s(_vm.showAnswers ? '隐藏答案' : '显示答案')+\" \")])]),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.showProgress),expression:\"showProgress\"}],staticClass:\"progress\"},[_vm._v(_vm._s(_vm.progressText))]),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.showResult),expression:\"showResult\"}],staticClass:\"result-container\"},[(_vm.isLoadingResult)?_c('div',{staticClass:\"loading\"},[_c('p',[_vm._v(\"正在生成分析报告...\")])]):_c('div',{staticClass:\"analysis-result\"},[_c('h2',[_vm._v(\"笔试答案分析报告\")]),_c('div',{staticClass:\"visualization-container\"},[_c('div',{staticClass:\"chart-wrapper\"},[_c('canvas',{ref:\"resultChart\",attrs:{\"width\":\"400\",\"height\":\"300\"}})])]),_c('div',{staticClass:\"analysis-content\",domProps:{\"innerHTML\":_vm._s(_vm.answerHtml)}})])])])])])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div class=\"nav-container\">\r\n    <div class=\"container\">\r\n      <div class=\"button-group\">\r\n        <button @click=\"jumpToHome\" class=\"custom-btn\">返回首页</button>\r\n      </div>\r\n      \r\n      <div class=\"exam-container\">\r\n        <h1>笔试答案分析</h1>\r\n        \r\n        <!-- 题目与答案区域 -->\r\n        <div ref=\"examContent\" class=\"exam-content\">\r\n          <div v-if=\"isLoading\" class=\"loading\">\r\n            <p>正在加载笔试内容...</p>\r\n          </div>\r\n          \r\n          <div v-else class=\"question-container\">\r\n            <div v-for=\"(questionItem, index) in questions\" :key=\"index\" class=\"question\">\r\n              <h3>问题 {{ index + 1 }}</h3>\r\n              <div class=\"question-content\">\r\n                {{ questionItem.question }}\r\n              </div>\r\n              <div class=\"options\">\r\n                <label class=\"option\" v-for=\"(option, optIndex) in questionItem.options\" :key=\"optIndex\">\r\n                  <input \r\n                    type=\"radio\" \r\n                    :name=\"'q' + (index + 1)\" \r\n                    :value=\"option.value\" \r\n                    v-model=\"answers[index]\"\r\n                  >\r\n                  {{ option.label }}. {{ option.content }}\r\n                </label>\r\n              </div>\r\n              <div class=\"user-answer\">\r\n                <p><strong>你的答案：</strong>{{ answers[index] || '未选择' }}</p>\r\n                <p v-if=\"showAnswers\"><strong>正确答案：</strong>{{ questionItem.answer }}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- 提交区域 -->\r\n        <div class=\"submit-area\">\r\n          <button @click=\"handleUpload\" id=\"submitBtn\" :disabled=\"isUploading\">\r\n            {{ isUploading ? '分析中...' : '分析答案' }}\r\n          </button>\r\n          <button @click=\"showAnswers = !showAnswers\" class=\"show-answer-btn\">\r\n            {{ showAnswers ? '隐藏答案' : '显示答案' }}\r\n          </button>\r\n        </div>\r\n        \r\n        <!-- 进度显示 -->\r\n        <div v-show=\"showProgress\" class=\"progress\">{{ progressText }}</div>\r\n        \r\n        <!-- 结果展示区域 -->\r\n        <div v-show=\"showResult\" class=\"result-container\">\r\n          <div v-if=\"isLoadingResult\" class=\"loading\">\r\n            <p>正在生成分析报告...</p>\r\n          </div>\r\n          \r\n          <div v-else class=\"analysis-result\">\r\n            <h2>笔试答案分析报告</h2>\r\n            <div class=\"visualization-container\">\r\n              <div class=\"chart-wrapper\">\r\n                <canvas ref=\"resultChart\" width=\"400\" height=\"300\"></canvas>\r\n              </div>\r\n            </div>\r\n            <div v-html=\"answerHtml\" class=\"analysis-content\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport html2canvas from 'html2canvas';\r\nimport { Chart } from 'chart.js';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      questions: [],        // 题目数据\r\n      answers: [],          // 用户答案\r\n      isLoading: true,      // 加载题目状态\r\n      isUploading: false,   // 上传状态\r\n      showProgress: false,  // 显示进度\r\n      showResult: false,    // 显示结果\r\n      isLoadingResult: false, // 加载结果状态\r\n      progressText: '',     // 进度文本\r\n      answerContent: '',    // 分析结果内容\r\n      answerHtml: '',       // 分析结果HTML\r\n      showAnswers: false,   // 显示正确答案\r\n      requestId: null,      // 请求ID\r\n      apiBaseUrl: 'https://117.72.49.76:443', // API基础URL\r\n      chart: null,          // 图表实例\r\n      analysisData: {}      // 分析数据\r\n    };\r\n  },\r\n  mounted() {\r\n    this.loadQuestions();\r\n  },\r\n  methods: {\r\n    jumpToHome() {\r\n      this.$router.push('/home');\r\n    },\r\n    \r\n    // 加载题目\r\n    loadQuestions() {\r\n      try {\r\n        const questionData = localStorage.getItem('question');\r\n        if (questionData) {\r\n          this.parseQuestions(questionData);\r\n        } else {\r\n          this.isLoading = false;\r\n          this.questions = this.generateSampleQuestions(); // 生成示例题目\r\n        }\r\n      } catch (error) {\r\n        console.error('加载题目失败:', error);\r\n        this.questions = this.generateSampleQuestions(); // 生成示例题目\r\n      } finally {\r\n        this.isLoading = false;\r\n        this.answers = new Array(this.questions.length).fill(''); // 初始化答案数组\r\n      }\r\n    },\r\n    \r\n    // 生成示例题目（带分类）\r\n    generateSampleQuestions() {\r\n      return [\r\n        {\r\n          id: 1,\r\n          question: \"1. 下列哪个不是人工智能的主要研究领域？\",\r\n          options: [\r\n            { label: 'A', content: '机器学习', value: 'A' },\r\n            { label: 'B', content: '自然语言处理', value: 'B' },\r\n            { label: 'C', content: '量子计算', value: 'C' },\r\n            { label: 'D', content: '计算机视觉', value: 'D' }\r\n          ],\r\n          answer: 'C',\r\n          category: 'AI基础' // 题目分类\r\n        },\r\n        {\r\n          id: 2,\r\n          question: \"2. 下列哪个算法属于监督学习？\",\r\n          options: [\r\n            { label: 'A', content: 'K-means', value: 'A' },\r\n            { label: 'B', content: '决策树', value: 'B' },\r\n            { label: 'C', content: 'PCA', value: 'C' },\r\n            { label: 'D', content: 'LDA', value: 'D' }\r\n          ],\r\n          answer: 'B',\r\n          category: '机器学习' // 题目分类\r\n        },\r\n        {\r\n          id: 3,\r\n          question: \"3. 卷积神经网络(CNN)主要用于什么领域？\",\r\n          options: [\r\n            { label: 'A', content: '自然语言处理', value: 'A' },\r\n            { label: 'B', content: '计算机视觉', value: 'B' },\r\n            { label: 'C', content: '语音识别', value: 'C' },\r\n            { label: 'D', content: '强化学习', value: 'D' }\r\n          ],\r\n          answer: 'B',\r\n          category: '深度学习' // 题目分类\r\n        }\r\n      ];\r\n    },\r\n    \r\n    // 解析题目（支持分类）\r\n    parseQuestions(questionData) {\r\n      const questions = [];\r\n      const lines = questionData.split('\\n');\r\n      let currentQuestion = null;\r\n      let currentOptions = [];\r\n      \r\n      lines.forEach(line => {\r\n        const lineTrimmed = line.trim();\r\n        const qMatch = lineTrimmed.match(/^Q(\\d+):$/);\r\n        \r\n        if (qMatch) {\r\n          const qNum = parseInt(qMatch[1], 10);\r\n          if (currentQuestion) {\r\n            currentQuestion.options = currentOptions;\r\n            questions.push(currentQuestion);\r\n            currentOptions = [];\r\n          }\r\n          \r\n          currentQuestion = {\r\n            id: qNum,\r\n            question: '',\r\n            options: [],\r\n            answer: '',\r\n            category: '未知' // 题目分类，默认为未知\r\n          };\r\n        } \r\n        // 解析题目分类（格式：#分类: 深度学习）\r\n        else if (lineTrimmed.startsWith('#分类:')) {\r\n          if (currentQuestion) {\r\n            currentQuestion.category = lineTrimmed.slice(4).trim();\r\n          }\r\n        }\r\n        else if (lineTrimmed.startsWith('A.') || lineTrimmed.startsWith('B.') || \r\n                 lineTrimmed.startsWith('C.') || lineTrimmed.startsWith('D.')) {\r\n          const label = lineTrimmed.charAt(0);\r\n          const content = lineTrimmed.slice(2).trim();\r\n          currentOptions.push({ label, content, value: label });\r\n        } \r\n        else if (currentQuestion) {\r\n          currentQuestion.question += lineTrimmed + '\\n';\r\n        }\r\n      });\r\n      \r\n      if (currentQuestion) {\r\n        currentQuestion.options = currentOptions;\r\n        questions.push(currentQuestion);\r\n      }\r\n      \r\n      this.questions = questions;\r\n    },\r\n    \r\n    // 处理提交\r\n    async handleUpload() {\r\n      if (this.answers.some(answer => !answer)) {\r\n        alert('请回答所有问题');\r\n        return;\r\n      }\r\n      \r\n      this.isUploading = true;\r\n      this.showProgress = true;\r\n      this.progressText = '正在分析答案，请稍候...';\r\n      this.showResult = false;\r\n      this.isLoadingResult = false;\r\n      \r\n      try {\r\n        // 生成截图\r\n        const canvas = await html2canvas(this.$refs.examContent, {\r\n          useCORS: true,\r\n          logging: false,\r\n          scale: 2,\r\n          scrollX: 0,\r\n          scrollY: 0\r\n        });\r\n        const imageBase64 = canvas.toDataURL('image/png').split(',')[1];\r\n        \r\n        // 构建优化后的提示词（要求生成可视化评测报告）\r\n        let question = '生成结构化的笔试答案分析报告，要求包含以下可视化数据：\\n\\n';\r\n        question += '1. 整体正确率统计（百分比）\\n';\r\n        question += '2. 按知识点分类的掌握情况（如AI基础、机器学习等），需提供分类名称和掌握分数\\n';\r\n        question += '3. 错误题目的详细解析（包含错误原因和知识点补充）\\n';\r\n        question += '4. 针对性的学习建议\\n';\r\n        question += '5. 结构化数据输出（JSON格式），包含以上所有内容\\n\\n';\r\n        question += '以下是笔试题目、用户答案和正确答案：\\n\\n';\r\n        \r\n        this.questions.forEach((q, index) => {\r\n          question += `Q${index+1}: ${q.question}\\n`;\r\n          question += `用户答案: ${this.answers[index] || '未选择'}\\n`;\r\n          question += `正确答案: ${q.answer}\\n`;\r\n          question += `题目分类: ${q.category}\\n\\n`;\r\n        });\r\n        \r\n        // 发送分析请求\r\n        const analysisResponse = await fetch(`${this.apiBaseUrl}/image-understanding`, {\r\n          method: 'POST',\r\n          headers: { \r\n            'Content-Type': 'application/json',\r\n            'ngrok-skip-browser-warning': '69420'\r\n          },\r\n          body: JSON.stringify({ image_base64: imageBase64, question: question })\r\n        });\r\n        \r\n        const data = await analysisResponse.json();\r\n        \r\n        if (data.status === 'processing') {\r\n          this.requestId = data.request_id;\r\n          await this.pollResult();\r\n        } else {\r\n          this.handleAnalysisResult(data);\r\n        }\r\n      } catch (error) {\r\n        console.error('分析失败:', error);\r\n        this.answerContent = `网络错误：${error.message}`;\r\n        this.answerHtml = this.parseMarkdownToHtml(this.answerContent);\r\n        this.showResult = true;\r\n      } finally {\r\n        this.isUploading = false;\r\n        this.showProgress = false;\r\n      }\r\n    },\r\n    \r\n    // 处理分析结果\r\n    handleAnalysisResult(data) {\r\n      if (data.status === 'failed') {\r\n        this.answerContent = '分析失败：' + (data.error || '未知错误');\r\n        this.answerHtml = this.parseMarkdownToHtml(this.answerContent);\r\n        this.showResult = true;\r\n        return;\r\n      }\r\n      \r\n      this.answerContent = data.content || '暂无分析结果';\r\n      \r\n      // 尝试解析JSON数据用于可视化\r\n      try {\r\n        const jsonStart = this.answerContent.indexOf('{');\r\n        const jsonEnd = this.answerContent.lastIndexOf('}') + 1;\r\n        if (jsonStart > 0 && jsonEnd > jsonStart) {\r\n          const jsonContent = this.answerContent.substring(jsonStart, jsonEnd);\r\n          this.analysisData = JSON.parse(jsonContent);\r\n          this.renderVisualization();\r\n        }\r\n      } catch (error) {\r\n        console.error('解析分析结果失败:', error);\r\n        this.analysisData = {};\r\n      }\r\n      \r\n      this.answerHtml = this.parseMarkdownToHtml(this.answerContent);\r\n      this.showResult = true;\r\n    },\r\n    \r\n    // 轮询获取结果\r\n    async pollResult() {\r\n      try {\r\n        while (true) {\r\n          const resultResponse = await fetch(`${this.apiBaseUrl}/get-result/${this.requestId}`);\r\n          const result = await resultResponse.json();\r\n          \r\n          if (result.status === 'completed') {\r\n            this.handleAnalysisResult(result);\r\n            return;\r\n          } else if (result.status === 'failed') {\r\n            this.answerContent = '分析失败：' + (result.error || '未知错误');\r\n            this.answerHtml = this.parseMarkdownToHtml(this.answerContent);\r\n            this.showResult = true;\r\n            return;\r\n          }\r\n          \r\n          await new Promise(resolve => setTimeout(resolve, 3000));\r\n          this.progressText = '分析中，请稍候...';\r\n        }\r\n      } catch (error) {\r\n        console.error('轮询失败:', error);\r\n        this.answerContent = `轮询错误：${error.message}`;\r\n        this.answerHtml = this.parseMarkdownToHtml(this.answerContent);\r\n        this.showResult = true;\r\n      }\r\n    },\r\n    \r\n    // 渲染可视化图表\r\n    renderVisualization() {\r\n      if (!this.analysisData || !this.analysisData.categoryMastery) {\r\n        return;\r\n      }\r\n      \r\n      const ctx = this.$refs.resultChart.getContext('2d');\r\n      if (this.chart) {\r\n        this.chart.destroy();\r\n      }\r\n      \r\n      // 准备图表数据\r\n      const categories = Object.keys(this.analysisData.categoryMastery);\r\n      const scores = categories.map(category => this.analysisData.categoryMastery[category].score);\r\n      const backgroundColors = [\r\n        'rgba(59, 130, 246, 0.7)',\r\n        'rgba(16, 185, 129, 0.7)',\r\n        'rgba(243, 156, 18, 0.7)',\r\n        'rgba(230, 126, 34, 0.7)',\r\n        'rgba(220, 38, 38, 0.7)'\r\n      ];\r\n      \r\n      this.chart = new Chart(ctx, {\r\n        type: 'bar',\r\n        data: {\r\n          labels: categories,\r\n          datasets: [{\r\n            label: '知识点掌握情况 (%)',\r\n            data: scores,\r\n            backgroundColor: backgroundColors,\r\n            borderColor: backgroundColors.map(color => color.replace('0.7', '1')),\r\n            borderWidth: 1\r\n          }]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          scales: {\r\n            y: {\r\n              beginAtZero: true,\r\n              max: 100,\r\n              title: {\r\n                display: true,\r\n                text: '掌握度'\r\n              }\r\n            }\r\n          },\r\n          plugins: {\r\n            title: {\r\n              display: true,\r\n              text: '各知识点掌握情况'\r\n            },\r\n            legend: {\r\n              display: false\r\n            }\r\n          }\r\n        }\r\n      });\r\n    },\r\n    \r\n    // 转换Markdown到HTML\r\n    parseMarkdownToHtml(markdown) {\r\n      if (!markdown) return '<p>暂无分析结果</p>';\r\n      \r\n      let html = markdown\r\n        .replace(/\\*\\*(.*?)\\*\\*/g, '<h3>$1</h3>')\r\n        .replace(/^\\s*-\\s+(.*)$/gm, '<li>$1</li>')\r\n        .replace(/(<li>.*?<\\/li>)/gs, '<ul>$1</ul>')\r\n        .replace(/\\n{3,}/g, '\\n\\n') // 合并多余空行\r\n        .split('\\n\\n').map(paragraph => {\r\n          if (paragraph.trim().startsWith('<h3>') || paragraph.trim().startsWith('<ul>')) {\r\n            return paragraph;\r\n          }\r\n          return `<p>${paragraph.trim()}</p>`;\r\n        }).join('');\r\n        \r\n      return `<div class=\"answer-content\">${html}</div>`;\r\n    }\r\n  },\r\n  beforeDestroy() {\r\n    if (this.chart) {\r\n      this.chart.destroy();\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* 其他样式保持不变，新增图表容器样式 */\r\n.visualization-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  margin: 30px 0;\r\n  padding: 20px;\r\n  background: #fff;\r\n  border-radius: 8px;\r\n  box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.chart-wrapper {\r\n  width: 100%;\r\n  max-width: 600px;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .visualization-container {\r\n    padding: 15px;\r\n  }\r\n  \r\n  .chart-wrapper {\r\n    max-width: 100%;\r\n  }\r\n}\r\n</style>","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./三道题提交图像.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./三道题提交图像.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./三道题提交图像.vue?vue&type=template&id=b1e47e10&scoped=true\"\nimport script from \"./三道题提交图像.vue?vue&type=script&lang=js\"\nexport * from \"./三道题提交图像.vue?vue&type=script&lang=js\"\nimport style0 from \"./三道题提交图像.vue?vue&type=style&index=0&id=b1e47e10&prod&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"b1e47e10\",\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","staticClass","on","jumpToHome","_v","ref","isLoading","_l","questions","questionItem","index","key","_s","question","options","option","optIndex","directives","name","rawName","value","answers","expression","attrs","domProps","_q","$event","$set","label","content","showAnswers","answer","_e","isUploading","handleUpload","showProgress","progressText","showResult","isLoadingResult","answerHtml","staticRenderFns","data","answerContent","requestId","apiBaseUrl","chart","analysisData","mounted","loadQuestions","methods","$router","push","questionData","localStorage","getItem","parseQuestions","generateSampleQuestions","error","console","Array","length","fill","id","category","lines","split","currentQuestion","currentOptions","forEach","line","lineTrimmed","trim","qMatch","match","qNum","parseInt","startsWith","slice","charAt","some","alert","canvas","html2canvas","$refs","examContent","useCORS","logging","scale","scrollX","scrollY","imageBase64","toDataURL","q","analysisResponse","fetch","method","headers","body","JSON","stringify","image_base64","json","status","request_id","pollResult","handleAnalysisResult","message","parseMarkdownToHtml","jsonStart","indexOf","jsonEnd","lastIndexOf","jsonContent","substring","parse","renderVisualization","resultResponse","result","Promise","resolve","setTimeout","categoryMastery","ctx","resultChart","getContext","destroy","categories","Object","keys","scores","map","score","backgroundColors","Chart","type","labels","datasets","backgroundColor","borderColor","color","replace","borderWidth","responsive","maintainAspectRatio","scales","y","beginAtZero","max","title","display","text","plugins","legend","markdown","html","paragraph","join","beforeDestroy","component"],"sourceRoot":""}